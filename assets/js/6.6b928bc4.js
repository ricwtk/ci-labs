(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{269:function(t,e,n){"use strict";n.r(e);var s=n(39),a=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"lab-1-pre-lab"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lab-1-pre-lab","aria-hidden":"true"}},[t._v("#")]),t._v(" Lab 1: Pre-lab")]),t._v(" "),n("h2",{attrs:{id:"refresh-on-python"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refresh-on-python","aria-hidden":"true"}},[t._v("#")]),t._v(" Refresh on Python")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("Fibonacci sequence is a series of numbers:")]),t._v(" "),n("blockquote",[n("p",[t._v("0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...")])]),t._v(" "),n("p",[t._v("The first two numbers are 0 and 1. The rest of the numbers in the sequence is found by summing up two numbers before it.")])]),t._v(" "),n("li",[n("p",[t._v("Create a function, in Python, which takes the sequence length "),n("em",[t._v("sl")]),t._v(" as the input of the function and prints the Fibonacci sequence of the length "),n("em",[t._v("sl")]),t._v(".")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fibonacci")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fib_seq\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])])]),t._v(" "),n("h2",{attrs:{id:"random-selection-based-on-probability"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#random-selection-based-on-probability","aria-hidden":"true"}},[t._v("#")]),t._v(" Random selection based on probability")]),t._v(" "),n("p",[t._v("For this section. assume the "),n("code",[t._v("random.random()")]),t._v(" function selects the random number with even probability.")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("Consider a coin tossing event. If the probabilities of getting a head or a tail are even, i.e. 50%. Create a Python function which will simulate the coin tossing event and return the result as "),n("code",[t._v("head")]),t._v(" or "),n("code",[t._v("tail")]),t._v(".")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tossCoin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" headOrTail\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])]),t._v(" "),n("li",[n("p",[t._v("If the probabilities of getting a head or a tail are not even, with head as 20% and tail as 80%, how would you change the Python function you created previously to adapt to this coin?")])]),t._v(" "),n("li",[n("p",[t._v("Consider the event of selecting one option out of three options randomly. The probability of choosing option "),n("code",[t._v("A")]),t._v(" is 20%, "),n("code",[t._v("B")]),t._v(" is 50%, and  "),n("code",[t._v("C")]),t._v(" is 30%. Create a Python funciton to simulate the random selection of the options.")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("chooseFromThree")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" selectedOption\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])])])])},[],!1,null,null,null);e.default=a.exports}}]);